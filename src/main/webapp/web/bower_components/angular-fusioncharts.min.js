/*! angular-fusioncharts - v2.1.0*/

!function () {
    var a = angular.module("ng-fusioncharts", []);
    a.directive("fusioncharts", ["$http", function () {
        return {
            scope: {
                width: "@",
                height: "@",
                data: "@",
                dataset: "@",
                categories: "@",
                chart: "@",
                linkdedata: "@",
                trendlines: "@",
                vtrendlines: "@",
                annotations: "@",
                colorrange: "@",
                lineset: "@",
                axis: "@",
                connectors: "@",
                pointers: "@",
                value: "@",
                processes: "@",
                tasks: "@",
                rows: "@",
                columns: "@",
                map: "@",
                markers: "@"
            }, link: function (a, b, c) {
                var d, e, f, g, h, i, j = {
                    width: {
                        ifExist: !1, observer: function () {
                            m.resizeTo(a.width, a.height)
                        }
                    }, height: {
                        ifExist: !1, observer: function () {/*m.resizeTo(a.width,a.height)*/
                        }
                    }, chart: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.chart = JSON.parse(a), m.setJSONData(i.dataSource)
                            }, 0)
                        }
                    }, data: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.data = JSON.parse(a), m.setJSONData(i.dataSource)
                            }, 0)
                        }
                    }, categories: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.categories = JSON.parse(a), m.setJSONData(i.dataSource)
                            }, 0)
                        }
                    }, dataset: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.dataset = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, linkeddata: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.linkeddata = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, trendlines: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.trendlines = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, vtrendlines: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.vtrendlines = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, annotations: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.annotations = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, colorrange: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.colorrange = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, lineset: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.lineset = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, axis: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.axis = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, connectors: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.connectors = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, pointers: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.pointers = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, value: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.value = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, processes: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.processes = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, tasks: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.tasks = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, rows: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.rows = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, columns: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.columns = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, map: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.map = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, markers: {
                        ifExist: !0, observer: function (a) {
                            "json" === i.dataFormat && "object" == typeof i.dataSource && setTimeout(function () {
                                i.dataSource.markers = JSON.parse(a), m.setJSONData(i.dataSource)
                            })
                        }
                    }, datasource: {
                        ifExist: !0, observer: function (a) {
                            i.dataSource = a, "json" === i.dataFormat ? (i.dataSource = JSON.parse(a), m.setChartData(i.dataSource)) : "xml" === i.dataFormat ? m.setXMLData(a) : "jsonurl" === i.dataFormat ? m.setJSONUrl(a) : "xmlurl" === i.dataFormat && m.setXMLUrl(a)
                        }
                    }, config: {
                        ifExist: !1, observer: function (a) {
                            var b;
                            if (a) {
                                b = JSON.parse(a), e;
                                for (e in b)i[e] = b[e];
                                o()
                            }
                        }
                    }
                }, k = {}, l = Object.keys(c), m = null, n = {
                    "*": function (a, b) {
                        k.hasOwnProperty(a.eventType) && k[a.eventType](a, b)
                    }
                }, o = function () {
                    m && m.dispose && m.dispose(), m = new FusionCharts(i), a[c.chartobject] = m, m.render()
                };
                if (c.events && a.$parent[c.events]) {
                    f = a.$parent[c.events];
                    for (g in f)f.hasOwnProperty(g) && (k[g.toLowerCase()] = f[g])
                }
                for (d = 0; d < l.length; d++)e = l[d], e.match(/^on/i) && (g = e.slice(2).toLowerCase(), k[g] = a.$parent[c[e]]);
                i = {
                    type: c.type,
                    width: c.width,
                    height: c.height,
                    renderAt: b[0],
                    id: c.chartid,
                    dataFormat: c.dataformat || "json",
                    dataSource: {},
                    events: n
                };
                for (h in j)attrConfig = j[h], (attrConfig.ifExist === !1 || c[h]) && c.$observe(h, attrConfig.observer);
                o()
            }
        }
    }])
}();